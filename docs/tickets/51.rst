=====================
#51 : Lino and Tryton
=====================

In November 2011 I discovered OpenERP and was amazed 
by how good it is and how well it covers what I can do 
with Lino.
:doc:`A few days later </blog/2011/1122>`
I discovered that OpenERP cannot be considered free software, 
but that we have `Tryton <http://www.tryton.org>`_, 
a free fork of OpenERP.

This discovery raised an important question:
which framework is better?
Should I drop Lino and join the Tryton community?
Or continue with Lino and become their concurrent?

Qualities of a framework (AFAICS):

- User interface : 
  is it beautiful, intuitive, efficient?

- Prototyping : 
  how much does it cost the customer to get a first prototype of 
  their customized application?
  
- Hardware requirements:
  what hardware is needed to get the system up and running?
  
- Maintainability : 
  how much will changes to the software cost?
  
- Scalability :
  how will the application manage being used by 10, 100, 1000 users?

- Long-term stability:
  will the framework still be available in 5, 10, 20 years?

To answer these questions I see no other solution 
than to test it on the field: write a Tryton
application and attempt to convince myself 
and the Lino users in Eupen that Tryton is better than Lino.

But it will take weeks for me to get familiar with Tryton
and feel ready for a decision.

One thing is clear: 
Tryton is a mature product with a competent and sympathic community, 
while Lino is a young project by a single developer with a few users.

A relatively visible difference is that Lino uses a web client 
while Tryton needs it's own GTK client installed. 
Difficult to say which is better.

Luc's last (:doc:`</blog/2011/1207>`) statement on this question is:

I guess (but didn't see with my own eyes) 
that Tryton is better for the following topics 
(where Lino provides only a satisfying solution 
(i.e. on which I'm not really proud):

- WYSYWYG editor and rich text fields
- File Uploads

Lino has some unique features and ways of doing things, which 
differ from Tryton, and I guess (but didn't verify) that I 
wouldn't be satisfied with other approaches:

- Support for multilingual database content
- Data migration
- Polymorphism (MTI)
- Synchronize data from a legacy database

