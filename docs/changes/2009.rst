Changes 2009
============

20090213
--------

Configurable boldness

Okay, it seems that not all printer drivers behave correctly when they
get «unusual» font weights. New testcase 
srcref:`tests/textprinter/3.py` 
shows whether your
configured PostScript printer does it right. On the other hand the
"Courier New" font looks «too lightweight» to many people on most
printers. So I must make this option customizable. 

N.B.: :mod:`win32.lib.win32con` defines the following names::

  FW_DONTCARE = 0 
  FW_THIN = 100 
  FW_EXTRALIGHT = 200 
  FW_LIGHT = 300 
  FW_NORMAL = 400 
  FW_MEDIUM = 500 
  FW_SEMIBOLD = 600 
  FW_BOLD = 700 
  FW_EXTRABOLD = 800 
  FW_HEAVY = 900 
  FW_ULTRALIGHT = FW_EXTRALIGHT 
  FW_REGULAR = FW_NORMAL 
  FW_DEMIBOLD = FW_SEMIBOLD 
  FW_ULTRABOLD = FW_EXTRABOLD 
  FW_BLACK = FW_HEAVY



20090227
--------

:doc:`../timtools/index` 0.6.42 released:

- The boldness of bold and normal text is now configurable for
  prnprint.py
  (see [ref NEW:492 How bold is bold? (14.04.07)]).           


20090418
--------

I discovered that :meth:`lino.textprinter.pdfprn.PdfTextPrinter.insertImage`
has changed its behaviour between `0.6.37 <20071123_>`  and 
`0.6.42 <20090227>`_.
Maybe because I upgraded the ReportLab toolkit between those releases. 

PdfTextPrinter.insertImage() does not support *behindText*.
Images are always placed over any text that occurs before them in 
the input file.


20090419 Working on tests
-------------------------

- runtests.py now recurses into subdirs.

- Started to move configuration options from "lino.config" to application-specific options. The first option is
  :configcmd:`postscript_printer`.
  Its definition has moved 
  from the obsolete global :xfile:`lino.cfg` file to a new file :xfile:`runtest.ini`.
  Until now it was accessed in testcases by::
  
    config.win32.get('postscript_printer')
    
  New access code::
  
    self.runtests.options.postscript_printer

- moved my_import and tsttools from lino.misc to lino.tools


20090510
--------

- (Many undocumented changes during the last weeks.)

- :class:`Instantiator` now supports many-to-many fields. 
  Content of a many-to-many field can now be specified as a string 
  containing a space-separated list of primary keys.
  Or, if you want to use another field than the primary key for specifying related objects, m2m_field:lookup_field syntax.
  Examples for both usages are in :srcref:`src/lino/django/songs/fixtures/demo.dpy`.
  

20090511
--------

- :mod:`mysites.demo.makedemo` now finds the list of installed apps automatically.
  So I no longer need to change :xfile:`makedemo.py` after changing
  :configcmd:`INSTALLED_APPS`.
  
  
- Worked on website pages 
  :doc:`../django/index` and
  :doc:`../about/what_is`.
  
- :meth:`Row.field_as_readonly` now supports when a value is a :class:`Manager` (which is the case when you specify a ManyToManyField).

- Classes :class`Singer` and :class`Author` are now subclasses of :class`Person`.

- Started `Common models`_

- updated my copy of Django from 10618 to 10736


Common models
-------------

:class`Language` and :class`Country` are a first example of 
model reuse by several applications. They are now defined in
:mod:`lino.django.utils`.

The order of applications in :configcmd:`INSTALLED_APPS` becomes
important: :func:`lino_setup` is called in that order.
  
This way of doing has unresolved issues:
  - cannot make a common class become abstract
  - cannot remove a menu item or change order of menu items



20090513
--------

- Added Collection and Places to songs.models. 
  Added sample data in songs/fixtures/demo.dpy.
- Instantiator now supports a lookup_field for ForeignKey.
