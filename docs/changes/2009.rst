Changes 2009
============


20090214
--------

- New optional keyword argument `fontWeights=None` in
  :meth:`Win32TextPrinter.__init__`.

- :mod:`lino.config` now also looks for a lino.cfg in the current working directory.


- I deprecated :mod:`lino.config` after discovering Dan Gass's
  `cfgparse <http://cfgparse.sourceforge.net/>`__ module. 
  :class:`lino.console.application.Appliation.` now uses this module. 
  
  :attr:`Appliation.configfile`
  :meth:`Appliation.setupConfigParser`
  
  Example:
  :meth:`lino.scripts.prnprint.PrnPrint.setupConfigParser`


20090216
--------

- My fascination for the cfgparse module got a slap in the face when I tried to implement the following features:
  
  - The name of the configuration file to be used should be
    configurable in the command line.
  - Configuration files should be of type Python even if their 
    name doesn't end with ".py"
  
  (Note that it almost worked, 
  :meth:`cfgparse.ConfigParser.parse` first executes 
  OptionParser.parse_args() to parse the command line and 
  stores the result in :attr:`optparser_options`. 
  Or by using 
  
  Then I read on
  http://wiki.python.org/moin/ConfigParserShootout
  that most config file parser modules invest a lot of energy for so-called nested section names, a feature that I don't need, 
  and that Guido refuses to 
  
  Then I realized how easy it is to simply read configuration files with the standard :meth:`execfile`. 
  
  Conclusion: I removed the :mod:`cfgparse` and related code again, replaced it by a few lines in :meth:`Appliation.applyOptions` and 
  two class variables:
  
  - :attr:`Appliation.configfile`
    specifies the default name of the application's configuration file. 
    If it is None, then there is no :cmd:`--config` option.
        
  - :attr:`Appliation.configdefaults` : a dictionary of default
    values.

  The only thing I regret is that I must now find other ways to document the variables that may occur in a config file.
  
  :attr:`lino.scripts.prnprint.PrnPrint.configfile`
  :attr:`lino.scripts.prnprint.PrnPrint.configdefaults`
  
  
  
.. keyword:: fontWeights

A tuple of fontweight values expressing the boldnesses of 
normal and bold text.
Default is (400,700). 
Another reasonable value is (600,800).
  


- Note that the :meth:`optparse.Values.read_file` of the standard library is currently::

    def read_file(self, filename, mode="careful"):
        vars = {}
        execfile(filename, vars)
        self._update(vars, mode)
        
  I should maybe suggest to change it to::

    def read_file(self, filename, mode="careful",defaults={}):
        execfile(filename, defaults)
        self._update(defaults, mode)

  
20090216b
---------

- I realized that :mod:`lino.scripts.prnprint` might become meaningless if I manage 
  to find a quick way to print a PDF file directly. 
  Quick for me means that it must be easily installable for my customers, and should not depend on the Acrobat Reader version.
  
  http://www.esnips.com/web/PDFTools
  
  Hmm...
  
  But here:
  http://two.pairlist.net/pipermail/reportlab-users/2005-May/003936.html
  
  Thanks to Thomas Blatter for posting this.
  
  New lino script :mod:`lino.scripts.pdfprint`. 
  It works, at least on my computer.  
  
  Unfortunately this trick can print only to the standard printer.
  So :mod:`lino.scripts.prnprint` cannot yet die...
  

  