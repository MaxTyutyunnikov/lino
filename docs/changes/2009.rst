Changes 2009
============

20090213
--------

Configurable boldness

Okay, it seems that not all printer drivers behave correctly when they
get «unusual» font weights. New testcase 
srcref:`tests/textprinter/3.py` 
shows whether your
configured PostScript printer does it right. On the other hand the
"Courier New" font looks «too lightweight» to many people on most
printers. So I must make this option customizable. 

N.B.: :mod:`win32.lib.win32con` defines the following names::

  FW_DONTCARE = 0 
  FW_THIN = 100 
  FW_EXTRALIGHT = 200 
  FW_LIGHT = 300 
  FW_NORMAL = 400 
  FW_MEDIUM = 500 
  FW_SEMIBOLD = 600 
  FW_BOLD = 700 
  FW_EXTRABOLD = 800 
  FW_HEAVY = 900 
  FW_ULTRALIGHT = FW_EXTRALIGHT 
  FW_REGULAR = FW_NORMAL 
  FW_DEMIBOLD = FW_SEMIBOLD 
  FW_ULTRABOLD = FW_EXTRABOLD 
  FW_BLACK = FW_HEAVY



20090227
--------

:doc:`../timtools/index` 0.6.42 released:

- The boldness of bold and normal text is now configurable for
  prnprint.py
  (see [ref NEW:492 How bold is bold? (14.04.07)]).           


20090418
--------

I discovered that :meth:`lino.textprinter.pdfprn.PdfTextPrinter.insertImage`
has changed its behaviour between `0.6.37 <20071123_>`  and 
`0.6.42 <20090227>`_.
Maybe because I upgraded the ReportLab toolkit between those releases. 

PdfTextPrinter.insertImage() does not support *behindText*.
Images are always placed over any text that occurs before them in 
the input file.


20090419 Working on tests
-------------------------

- runtests.py now recurses into subdirs.

- Started to move configuration options from "lino.config" to application-specific options. The first option is
  :configcmd:`postscript_printer`.
  Its definition has moved 
  from the obsolete global :xfile:`lino.cfg` file to a new file :xfile:`runtest.ini`.
  Until now it was accessed in testcases by::
  
    config.win32.get('postscript_printer')
    
  New access code::
  
    self.runtests.options.postscript_printer

- moved my_import and tsttools from lino.misc to lino.tools


20090510
--------

- (Many undocumented changes during the last weeks.)

- :class:`Instantiator` now supports many-to-many fields. 
  Content of a many-to-many field can now be specified as a string 
  containing a space-separated list of primary keys.
  Or, if you want to use another field than the primary key for specifying related objects, m2m_field:lookup_field syntax.
  Examples for both usages are in :srcref:`src/lino/django/songs/fixtures/demo.dpy`.
  

20090511
--------

- :mod:`mysites.demo.makedemo` now finds the list of installed apps automatically.
  So I no longer need to change :xfile:`makedemo.py` after changing
  :configcmd:`INSTALLED_APPS`.
  
  
- Worked on website pages 
  :doc:`../django/index` and
  :doc:`../about/what_is`.
  
- :meth:`Row.field_as_readonly` now supports when a value is a :class:`Manager` (which is the case when you specify a ManyToManyField).

- Classes :class`Singer` and :class`Author` are now subclasses of :class`Person`.

- Started `Common models`_

- updated my copy of Django from 10618 to 10736


Common models
-------------

:class`Language` and :class`Country` are a first example of 
models being used by several applications. They are now defined in
:mod:`lino.django.utils`.

The order of applications in :configcmd:`INSTALLED_APPS` becomes
important: :func:`lino_setup` is called in that order.
  
This way of doing has unresolved issues:
  - cannot make a common class become abstract
  - cannot remove a menu item or change order of menu items



20090513
--------

- Added Collection and Places to songs.models. 
  Added sample data in songs/fixtures/demo.dpy.
- Instantiator now supports a lookup_field for ForeignKey.

20090514
--------

- Worked on :xfile:`/src/lino/django/igen/fixtures/demo.dpy`.

- Added :class:`lino.django.igen.models.Contract`.

- I noticed that Django's DateField does no validation and no conversion from string to date. :class:`lino.django.utils.instantiator.DateConverter`
  How to parse a datetime.date from a string? 
  The standard Python module has now support at all, even not to 
  parse a simple iso-formatted date. `PEP 321 <http://www.python.org/dev/peps/pep-0321/>`_ was exactly what I'd need now, but it has been withdrawn... I also read
  http://mail.python.org/pipermail/python-dev/2004-April/044181.html
  and
  http://mail.python.org/pipermail/python-list/2003-November/236842.html
  
  Conclusion: I started by writing a parse_date() myself, then I understood that I also need other things from python-dateutil, so I threw it away and added dateutils to :meth:`lino.django.utils.sites.LinoSite.tanks_to`.
  
20090519
--------

- preparing for field-specific default width in Layouts            

- :meth:`Row.field_as_readonly` now sets ``style="width:100%"`` when  :attr:`Element.width`is `None`.

- removed `null=True` from string fields after reading 
  http://docs.djangoproject.com/en/dev/ref/models/fields/#null
  
- New :class:`GRID_CELL` to render more than one field in a single 
  grid cell. 
 
- Started :class:`igen.models.MakeInvoicesDialog`. 
  A Dialog is an enhanced django.forms.Form that can be installed as a menu action.
  In Module :mod:`render`: 
  started to split new class ElementServer out of Row
  because Dialog will need only the ElementServer part of Row.
  
20090520
--------

- Good news: 
  `Active Systems <http://www.active.ee>`_ is probably going to participate in the development of igen.
  We started an issues tracker on their server at
  http://code.active.ee:3000/projects/lino/issues  
  We also wrote some Wiki pages:
  https://code.active.ee/wiki/doku.php?id=igen:igen

20090521
--------

- Merged :class:`Contract` into :class:`Order`. A contract is just a cyclic Order.

- Worked on :meth:`Order.make_invoice`.
  make_invoice() will have to know when the next billing will occur.
  And whether a service must be paid for before or afterwards the period.
  For the moment we simplify by saying that the billing happens once per month.

  
- The old question again: which documentation system to use?
  `Doxygen <http://www.stack.nl/~dimitri/doxygen/>`_ 
  and
  `breathe <http://github.com/michaeljones/breathe/tree/master>`_?
  After playing around I continue to believe that documentation 
  must be maintained outside of the source code.
  Result for today: :doc:`../django/igen/index`.

- Pro-rata : the covered period in a generated invoice may be longer or shorter than
  normal in certain cases. 
  
  For example assume that invoices are sent only once a month, for
  example on the first working day of each month.
  What should we do if a monthly service order starts at the 28th of a
  month? Or at the 5th of the month? 
  :class:`Order` should get a new field, called maybe "Pro-rata".
  Definition of "Pro-rata": see http://en.wikipedia.org/wiki/Pro-rata.
  For the moment we simplify by saying that the covered period never 
  adapts automatically to the billing cycle.
  
  
20090522
--------

- The new class attributes :attr:`reports.Report.filter` and
  :attr:`reports.Report.exclude` refer to the corresponding Django methods to limit a queryset.
  
- Issue `edit a report's grid view fails <http://code.active.ee:3000/issues/show/342>`_

- Report extensively uses sime class attribut overriding in subclasses. That's what I want, but it has one disadvantage: typo's are not detected. :meth:`Report.__init__` now tries to detect them. This can be switched off by setting :attr:`Report.typo_check` to False.

- New module :mod:`lino.django.utils.perms` with some shortcuts :func:`perms.is_staff`, :func:`perms.is_authenticated` and :func:`perms.never`.
  Trying this on `Invoices.can_view = is_staff`,
  `Orders.can_view = is_authenticated` and
  `InvoicesToSend.can_add = never`.

20090523
--------

- Why did I try to write my own permissions system? because I don't like the system suggested by :mod:`django.contrib.auth`. 
  "but it's not currently possible to say "Mary may change news stories, but only the ones she created herself" or "Mary may only change news stories that have a certain status, publication date or ID." The latter functionality is something Django developers are currently discussing."
  (http://docs.djangoproject.com/en/dev/topics/auth/#permissions)
  
  Some trace of the discussion is here:
  http://code.djangoproject.com/ticket/3011
  
  My conclusion: don't insist for the moment on permissions and user management. Make my perms module minimal but usable and use it temporarily until Django has a good solution.
  
20090524
--------

- continued on :mod:`lino.django.utils.perms`. Now it works.
  (Updated http://code.active.ee:3000/issues/show/338)

- fixed a bug in http://127.0.0.1:8000/voc/tree

- Committed revision 681.

20090525
--------

- worked on ticket http://code.active.ee:3000/issues/show/337
  - added DocItem.discount
  - added an example in demo
  
- new DecimalConverter in Instantiator. DecimalFields were stored as strings in the database. And Django didn't complain (maybe simply because I use the sqlite backend which allows such things).
  
- Committed revision 683.

20090526
--------

- bug in demo.dpy

- :meth:`DocItem.before_save` now always sets :attr:`DocItem.total` (except when unitPrice or qty is None).
  :meth:`DocItem.total_incl` no longer necessary.

- Committed revision 684.

- PaymentPerm.months and PaymentTerm.days.
  It's not yet clear how igen should decide which type of invoice to generate (normal or proforma).


20090601
--------

- removed unused scripts in mysites/demo. 
- renamed makedemo.py to reset_demo.py
- make_invoices.py is a script in mysites/demo 
  but later it might become a Django command.
  
- PendingOrders is the first example of a Report with a customized params_form.
  Changed the handling of Report parameters.

- OrderManager is my first usage of a manager. It is needed for PendingOrders

20090603
--------

- Foreign keys are now rendered as clickable links to the pointed object's page. Clickable Pointers. 
  - :meth:`lino.django.utils.sites.LinoSite.get_instance_url`
  - :class:`lino.django.utils.reports.ReportMetaclass`

20090604
--------

- New :class:`lino.django.igen.models.InvoicingTerm`


20090605
--------

- Journals and Documents now functioning. 
  The main visible result is that 
  http://igen.saffre-rumma.ee/contacts/contacts/4?tab=1
  is now able to show the documents' class (order or invoice)
  
- Document.number won't be with a document counter Journal.lastnum as in TIM.
  Karen Tracey helped me to think on this:
  http://groups.google.com/group/django-users/browse_thread/thread/227e9a638e4333fc
  
  TODO:
  
  - leave Journal and Document as a separate application "journals"?
  
  - payment terms, shipping modes and invoicing modes: 
    how to make configurable default values for these settings? 
    - Per Journal (by subclassing journals.Journal)?
    - Currently this is in DocumentRule
    - maybe rather a "template document" with number -1 ?
    
  - Is InvoicingMode the right word? 
    If yes, then imode should be only in Order, not in Document.
  
- Committed revision 694.

- The next big step is done: row actions. `DocumentsToSend <http://igen.saffre-rumma.ee/docs/documentstosend>`_ is a first usage example. You can select one or several rows in the grid view, then click on "sign" to sign them. Since this list shows only unsigned documents, they then disappear from this list.

  Deleting rows is now also done using this mechanism, no longer using Django's FormSet.can_delete trick. In fact I find it strange that FormSet has a can_delete and can_order, but not a can_select...
  
  There are lots of little bugs hanging around, but the proof of concept is now almost complete.

  TODO: confirmation dialog before deleting rows...

- Committed revision 698.

20090612
--------

- Payments for igen. New "ledger" module. The trunk is currently unstable because I'm experimenting with the general structure. Here are some design decisions I'm currently busy with:

  Should the menu of a website be done automatically using LinoSite.autodiscover()? Maybe this idea is utopic. Maybe it's better to stay simple and let each site build it's own menu...
  
  There should probably be a menu entry for each Journal. So we have a database-driven menu, at least partially. The webserver will have to reload the urls when Journals gets modified...
  Alternatively the journals may be non-persistent and "hard-coded" in some configuration file. 
  
  It seems that also pisa (xhtml2pdf) has a lot of problems. Pisa was my only hope to get away from LaTeX. 
  Maybe still `XSL-FO <http://www.w3schools.com/xslfo/default.asp>`_
  
20090613
--------

- utils and ledger are now in INSTALLED_APPS

20090716
--------

- I you want to see an invoice generated by iGen, then click on
  http://igen.saffre-rumma.ee/sales/invoices/2/pdf
  But notice that you will first have to log in as root (password "1234"). 
  
20090810
--------

- Bug report: 
  on a Windows XP running on a virtual machine of a Mac, calling for example...
  
  ::
  
    prnprint .\preview.prn
    
  ... causes an error::

    Traceback (most recent call last):
      File "prnprint.py", line 153, in <module>
      File "prnprint.py", line 150, in main
      File "lino\console\application.pyo", line 210, in main
      File "prnprint.py", line 139, in run
      File "lino\textprinter\textprinter.pyo", line 198, in readfile
    WindowsError: [Error 123] Die Syntax für den Dateinamen, Verzeichnisnamen oder die Datenträgerbezeichnung ist falsch: '.'


- Released `TIM Tools 0.6.43 <http://lino.googlecode.com/files/timtools-0.6.43-py2exe.zip>`_. which fixes the above bug.

20090811
--------

- Working on ExtJS integration. The main menu was easy. 
  Now I'm at the databrowse which uses a Ext.grid.Grid.

- Should Lino use XML or JSON for AJAX? 

  Answer (from http://ajaxian.com/archives/json-vs-xml-the-debate):
  "JSON is a better fit for Web services that power Web mashups and AJAX widgets due to the fact that it is essentially serialized Javascript objects which makes it fit better client side scripting which is primarily done in Javascript. That’s it. XML will never fit the bill as well for these scenarios without changes to the existing browser ecosystem which I doubt are forthcoming anytime soon."
  
  
  

.. _latest-news:
