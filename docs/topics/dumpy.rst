===============
Python fixtures
===============

The :mod:`lino.utils.dumpy` module defines 

- a Django *data serializer* that dumps data into a Python fixture
- a *deserializer* that loads Python fixtures into the database

A Python fixture is a normal Python module which defined 
a function `objects` 
which should return or yield the list of model instances 
to be added. Fictive minimal Example::

  from myapp.models import Foo
  def objects():
      yield Foo(name="First")
      yield Foo(name="Second")
      
There are two big use cases for :mod:`lino.utils.dumpy`: 

(1) "intelligent" fixtures to create reusable sets of demo example
(2) :doc:`/admin/datamig`

      


To use the :mod:`lino.utils.dumpy` module, you must declare it 
in Django's :setting:`SERIALIZATION_MODULES` setting::

  SERIALIZATION_MODULES = {
       "py" : "lino.utils.dumpy",
  }
  
When developing or using Lino applications you 
don't need to worry about this setting because 
you inherit it automatically when you 
do ``from lino.projects.FOO.settings import *`` in your :xfile:`settings.py`.
Only if you happen to define your own local serialization modules,
don't forget to also include Lino's :mod:`lino.utils.dumpy` module.

This module should also be usable for plain Django projects.
Just add the above setting in your :xfile:`settings.py` and 
try a ``manage.py dump --format py``.

If you don't want to install Lino, you can alternatively 
download only the :srcref:`dumpy module itself </lino/utils/dumpy.py>` 
and make a few changes concerning logging. 
(Just don't afterwards publish your changes using 
a license that is incompatible with the GPL, 
see :doc:`/about/why_gpl`)

To load Python fixtures you also need an :xfile:`__init__.py` 
file (which can be empty) in each fixture directory that has `.py` 
fixtures.


See also

- :doc:`/tutorials/dumpy`
- http://code.djangoproject.com/ticket/10664
 
Note about `django-extensions <https://github.com/django-extensions>`_ 
----------------------------------------------------------------------

`django-extensions <https://github.com/django-extensions>`_ 
has a command "dumpscript" which is comparable.
Differences: 

- dumpy produces fixtures to be restored with loaddata,
  dumpscript produces a simple python script to be restored with runscript
- the fixtures generated by dumpy are designed in order to make it possible to 
  write automated data migrations.
  
  
  
Models that get special handling in :mod:`lino.utils.dumpy`:
------------------------------------------------------------

- `ContentType` objects aren't stored in a dump because they 
  can always be recreated.
- `Site` and `Permission` objects *must* be stored and *must not* be re-created
- `Session` objects can get lost in a dump and are not stored.

