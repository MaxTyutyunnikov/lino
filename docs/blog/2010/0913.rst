2010-09-13
==========

Switching from mod_python to mod_wsgi
-------------------------------------

Oho, was les' ich `da <http://docs.djangoproject.com/en/dev/howto/deployment/modpython/>`__: 
ich muss von Apache mod_python auf mod_wsgi umsteigen.

Na dann mal los. Dokumentation steht auf

- http://docs.djangoproject.com/en/dev/howto/deployment/modwsgi/
- http://code.google.com/p/modwsgi/wiki/QuickConfigurationGuide

Ich muss vor allem ``aptitude install libapache2-mod-wsgi`` machen und dann ein paar Kleinigkeiten ändern, die ich gar nicht erst hier, sondern gleich in :doc:`/admin/install` notiert habe. Endlich habe ich auch mal die seit langem wartende Änderung gemacht, dass jedes Projekt sein lokales Django Project Directory kriegt statt wie bisher direkt auf die demo-Verzeichnisse im source repository zuzugreifen. Auch die Datenbank (sqlite) ist jetzt in `/usr/local/django/dsbe-demo`. Das media-Verzeichnis steht momentan noch in `/usr/local/lino`.

Auf `dsbe-demo <http://dsbe-demo.saffre-rumma.ee/>`__ klappt es schon (der ist allerdings sehr sehr langsam).
Auf `dsbe-eupen` habe ich jetzt folgende Fehlermeldung im Apache-Log:

  ImproperlyConfigured: The Django remote user auth middleware requires the authentication middleware to be installed.  Edit your MIDDLEWARE_CLASSES setting to insert 'django.contrib.auth.middleware.AuthenticationMiddleware' before the RemoteUserMiddleware class.
  
Das ist eine von Djangos Macken: mich für dumm zu halten. 
Denn natürlich hab ich in meiner :setting:`MIDDLEWARE_CLASSES` 
die AuthenticationMiddleware vor der RemoteUserMiddleware stehen.
Die Meldung kommt, weil RemoteUserMiddleware einen `request` kriegt, 
der kein Attribut `user` hat.
offenbar ist also irgendwo anders ein Fehler passiert, und Django hat den für 
mich (weil ich ja dumm bin) abgefangen und weggeworfen.

Jetzt würde ich gerne vom Django-Code aus mal schnell in den Apache error log loggen können.
Hier ist dazu was Interessantes:
http://djangosnippets.org/snippets/1731/
Also ich brauche unter Apache gar keine :xfile:`lino.log` mehr, sondern `lino.log` geht einfach nach `sys.stderr` (der dann seinerseits vom Apache in dessen :file:`error.log` geschrieben wird.

::
  import lino
  from django.conf import settings
  
  
  class LazyUser(object):
      def __get__(self, request, obj_type=None):
          if not hasattr(request, '_cached_user'):
              lino.log.debug("LazyUser.__get__() : install _cached_user")
              from django.contrib.auth import get_user
              request._cached_user = get_user(request)
              lino.log.debug("LazyUser.__get__() : install _cached_user ok")
          return request._cached_user  
          
  class AuthenticationMiddleware(object):
      def process_request(self, request):
          lino.log.debug("AuthenticationMiddleware 20100913 %s",settings.MIDDLEWARE_CLASSES)
          assert hasattr(request, 'session'), "The Django authentication middleware requires session middleware to be ins
          request.__class__.user = LazyUser()
          if hasattr(request, 'user'):
              lino.log.debug("AuthenticationMiddleware 20100913 ok")
          return None
          