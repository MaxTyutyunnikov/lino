20111210
========

- :class:`lino.modlib.links.models.LinksFromThis`.column_names
- removed contacts.RoleType and contacts.Role and adapted demo and std fixtures
- Adapted :func:`lino.apps.dsbe.migrate.migrate_from_1_2_8`

- Note that :class:`lino.apps.dsbe.models.ContactPersons`
  inherits :class:`lino.modlib.links.models.LinksFromThis`
  just to override the label.

Discovered that due to a bug in previous dpy versions
there were some Upload records on Role and RoleType 
in a customer's database.

:func:`lino.utils.mti.insert_child` no longer saves the child instance.
New function 
:func:`lino.utils.mti.insert_child_and_save`
which does save.

:term:`dpy fixtures` 
generated by :class:`lino.utils.dpy.DpySerializer` 
now use the new function 
:func:`lino.utils.mti.create_child` 
instead of 
:func:`lino.utils.mti.insert_child`.

This is because loading dpy fixtures failed to load back
our data due to the structure changes coming by the 
links.Link model
(converted from contacts.Role).
Solving this was quite a challenge.
insert_child() 
(needed when creating a Person, User or Company)
did (1) a useless lookup in Contact and (2) a useless save().

And even worse: the loading failed when a 
`Person.job_office_contact`
or a `Contract.contact`
was a Link that hadn't yet been created.
Such errors due to not yet existing related objects are usually handled 
by deferring the save(), but in this case the Exception ocurred 
already during the instantiation and thus wasn't handled by the deserializer.

:func:`lino.test_apps.1.models`
