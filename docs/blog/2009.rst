
20090308
--------

The Django volunteers are quick.
Yesterday I created `my first Django ticket <http://code.djangoproject.com/ticket/10431>`__, 
and it didn't last half an
hour before somebody answered. 

The answer wasn't long: It just said
"Dupe of `#8164 <http://code.djangoproject.com/ticket/8164>`_".

Yes, I didn't look at the SortedDict class.
And this solution of just setting `SortedDict.keyOrder`
is better and simpler than my method.

But where is this update? The patch is marked "Accepted", 
but is not yet in the trunk.  How can I now get it?
Answer:

- Download the patch from  http://code.djangoproject.com/attachment/ticket/8164/modelforms-fields-order.diff

- Then in a command shell::

    L:\snapshot\django>patch < c:\temp\modelforms-fields-order.diff
    can't find file to patch at input line 5
    Perhaps you should have used the -p or --strip option?
    The text leading up to this was:
    --------------------------
    |diff --git a/django/forms/models.py b/django/forms/models.py
    |index e6bbb98..d5eab82 100644
    |--- a/django/forms/models.py
    |+++ b/django/forms/models.py
    --------------------------
    File to patch:
    L:\snapshot\django>cd trunk
    The system cannot find the path specified.

    L:\snapshot\django>patch -p1 < c:\temp\modelforms-fields-order.diff
    patching file django/forms/models.py
    patching file docs/topics/forms/modelforms.txt
    patching file tests/modeltests/model_forms/models.py



20090309
--------

Surf:

- http://code.djangoproject.com/wiki/CookBookNewFormsFieldOrdering
  A description of the `SortedDict.keyOrder` 
  trick used by the patch in #8164.
  
- http://code.djangoproject.com/wiki/CookBookNewFormsDynamicFields
  Dynamically add fields to a Form.
  
- http://code.djangoproject.com/wiki/ModifiedPreorderTreeTraversal:
  An efficient parent/child relationship - Similar to the "category" data model above, but doesn't use recursive functions, neither multiple queries. 
  
- http://code.djangoproject.com/wiki/UsingMarkup
  Body fields that are rendered using markdown, restructured_text or textile, should store the raw input *and* the resulting HTML, because database columns are cheap and processing time maybe not.
  

How to implement readonly form fields
-------------------------------------

I submitted my second Ticket to Django: `#10442 
<http://code.djangoproject.com/ticket/10442>`__:

  I saw ticket #3990 , but IMHO, if a :class:`ModelForm` 
  has an explicit ``fields`` list,
  and if some of these fields are not editable, then they should be
  rendered as readonly widgets.
  That's the least surprising behaviour. 
  Currently they are just ignored.
  I am trying to write a patch, but I'm new to Django.

I even started with the patch:

  - django/forms/fields.py:

    :meth:`Field.__init__` has a new keyword argument "readonly".
    
  - django/forms/util.py:
    
    :func:`flatatt` now supports None values in the dictionary. 
    These don't become a key="value" pair but a simple attribute
    without value.


  - django/forms/models.py:
    :func:`model_to_dict` now also adds non-ediable fields to the
    dictionary.

I changed my working copy of Django to do the following::

  >>> class ContactForm(forms.Form):
  ...     id = forms.IntegerField(readonly=True)
  ...     fname = forms.CharField(max_length=20)
  ...     lname = forms.CharField(max_length=20)
  >>> frm = ContactForm()
  >>> s=frm.as_p()  
      
  <p><label for="id_id">Id:</label> 
  <input readonly type="text" name="id" id="id_id" />
  </p>
  <p><label for="id_fname">Fname:</label> 
  <input id="id_fname" type="text" name="fname" maxlength="20" />
  </p>
  <p><label for="id_lname">Lname:</label> 
  <input id="id_lname" type="text" name="lname" maxlength="20" />
  </p>        
      

But then my ticket had been already set to "wontfix". 
And now I agree with the Django developers because I get enlightened:

  Forms are not meant to contain layout. 
  That's also why the field order 
  (`#8164 <http://code.djangoproject.com/ticket/8164>`_)
  is not important in Forms.
  **If you want to define layout without fiddling with templates, 
  then you'll want a :class:`Report`.**



20090310
--------

Working on :class:`Report`.

The primary key field of a model is set to ``editable``, 
but it is rendered with a hidden field.

http://docs.djangoproject.com/en/dev/topics/forms/modelforms/#topics-forms-modelforms

20090315
--------

Mit der momentanen URL-Struktur kriege ich zwar schön einen Report 
angezeigt in Listen- und Seitenansicht, mit Auf- und Abblätterei... 
aber für Unter-Reports ist das eine Sackgasse. Zum Beispiel das 
folgende URL zeigt eine Rechnung in Vollbild:

    /docs/invoices?flt=2009&pgl=5pgn=3&row=2

Wenn diese Rechnung jetzt außerdem mehrere Seite an Inhalt hat, dann 
muss man ja auch im Inhalt blättern können. Und auch im Inhalt einen 
Filter setzen können. Also müsste ich die GET-Variablen mit einem 
Präfix versehen, um URLs wie die folgende zu kriegen:
  
      /docs/invoices?flt=2009&pgl=5pgn=3&row=2&\
      items_flt=a&items_pgl=5items_pgn=3&items_row=2
      
Stattdessen gibt es vielleicht eine bessere Lösung:
Report.view() behält die drei momentanen Variablen flt, pgl und pgn, 
aber schon :meth:`Row.links` in :xfile:`grid.html` verlässt diesen
Report, verweist direkt auf die betreffende Rechnung:
  
  /by_pk/igen_invoice/<pk>
  
Das Blättern machen wir dann über eine Session-Variable::

  nav = []
  if page.has_next()
      nav.append(html.A(
        "~Next",href=again(request,row=page.number+1)))
  if page.has_previous()
      nav.append(html.A(
        "~Previous",href=again(request,row=page.number-1)))
  ...
  request.session.navigation = nav

Also das, was die Templates momentan im ``{% block navigation %}`` 
konstruieren, wird dann im Code konstruiert und in der Session 
gespeichert, und die Templates machen nur noch ein generelles

  ``{{ nav.as_ul() }}``
  
Und wenn ich jemandem den Permalink einer Rechnung schicke, z.B. `/docs/invoices/7`_, dann sieht der Empfänger nicht mehr, wie ich diese Rechnung gefunden habe.

Korrektur: Statt des oben erwähnten ``request.session.navigation = nav`` brauche ich eine :class:`Navigator`.

  nav = Navigator(page)
  request.session['navigator'] = nav


Mal sehen, ob es klappt.
  
Och nee, das geht nicht, dadurch verliere ich das Feature, im Vollbild durch einen Report
blättern zu können. Denn wenn ich auf Vollbild schalte und dann auch Next klicke, wie soll er da
den Navigator machen, ohne das Queryset selber in der Session zu speichern?

Aber es geht anders: um einen Unterreport zu bearbeiten, verwendet das URL den pk der Rechnung,
also wenn der Inhalt einer Rechnung "offen" ist, dann kann man eben nicht auf die nächste 
Rechnung blättern. Ist ja logisch. Und wenn man den Inhalt speichert, ruft er einfach die
Listenansicht Rechnungen wieder neu auf, mit Positionierung am Ende.

Eine andere Frage ist die URL-Strukur. 
Bisher war es ja schön einfach: alle URLs entstehen automatisch aus dem Hauptmenü.
Aber jetzt brauche ich was Neues, 
denn ich muss ja den primary key aus der URL holen, *ohne* dafür die 
GET-Variablen zu benutzen.

Also entweder alle Models verfügbar machen:

  /_models/<db_table>/<pk>

Oder aber für Reports wie InvoiceItems, die einen variablen obligatorischen Parameter
``invoice`` haben (Signatur des Konstruktors analysieren, um die URL zu generieren?)

  /_reports/ItemsByInvoice/<invoice_id>
  /_reports/InvoicesByPartner/<partner_id>
  
Letzteres scheint mir richtig. Aber wie kriege ich das generiert? 
Das Menü könnte die Actors abfragen, und wenn der Actor ein Report ist, 
gibt er die URLs zu seinen Unter-Reports zurück.
Also ein Report müssrw sich selbst nach Methoden durchsuchen...
Hm...

  
  
20090328
--------

(Ich bin zur Zeit so schnell am entwickeln, dass es sich nicht lohnt,
das alles zu dokumentieren.)

Notiz: den ``<input type="text" readonly>`` nutze ich im 
ShowLayoutRenderer. (Besser gesagt dessen XML-kompatible Variante 
``<input type="text" readonly="readonly">``, bevor ich das las, dachte ich, dass ich Djangos Funktion :func:`flatattr` verbessern müsste, damit sie auch Attribute ohne "=" dahinter generieren kann...)
Dann merkte ich, dass das Attribut readonly für Checkboxen und Selects leider *nicht* funktioniert. Deshalb muss ich die selber rendern. 
 
  