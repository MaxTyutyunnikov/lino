Your first standalone Lino application
======================================

In this tutorial you are going to write your first 
standalone Lino application.
Don't hesitate to send us your feedback 
if you have suggestions on how to make this tutorial better.
  
.. contents:: Table of Contents
 :local:
 :depth: 2




More about the `settings.py` file
---------------------------------

Let's take your :xfile:`settings.py` file again and 
make some more changes to it.

Lino uses some tricks to make Django settings 
files more pleasant to work with,
especially if you maintain Lino sites for several customers.

At the beginning of the file are the following four lines of code::

    from lino.apps.dsbe.settings import *
    class Lino(Lino):
        title = "Lino Tutorial"
    LINO = Lino(__file__,globals()) 
    
The first line caused your settings to "inherit" 
from one of the predefined Lino applications.
Since this is going to be your own application, 
replace the ``dsbe`` or ``igen`` by ``std``::

    from lino.apps.std.settings import *
    
Because we no longer inherit settings 
from one of the predefined Lino applications, 
we now need to define the :setting:`INSTALLED_APPS` 
setting.
For this tutorial, put the following value::

    INSTALLED_APPS = (
      'django.contrib.contenttypes',
      'lino.modlib.users',
      'lino',
      'mysite.polls'
    )

Where you maybe need to change the last item to the name you used
during the Django Tutorial.

  
A few comments: 
  
- Most of the ``django.contrib.*`` modules are not 
  used in Lino, one exception is 
  ``django.contrib.contenttypes``.
- The ``lino.modlib.users`` is Lino's replacement 
  for Django's ``django.contrib.auth``.
- ``lino`` is mandatory for every Lino application.
  
Some more settings deserve our attention at this moment:

- Lino requires a setting named ``LINO`` which must 
  be a :class:`lino.Lino` instance.
  The first argument of the Lino instantiator 
  is the built-in Python variable `__file__`.
  That's how Lino knows the full path of your local settings file.
  The second argument is the `global()` namespace of your settings module.
  Lino will use this to fill intelligent default values to your settings.
  That's why these lines should be at the *beginning* of your file.

- More documentation about the :setting:`LOGGING` 
  setting in :func:`lino.utils.log.configure`
  
- The :setting:`ROOT_URL` setting 
  and the files :file:`urls.py` and :file:`polls/views.py` 
  generated by Django
  are not necessary in our first Lino application. 
  With Lino you don't need to worry about URLs.

You might want to compare your files with our version 
of this step of the tutorial. 
See :srcref:`/lino/tutorials/t1a`.

 
Designing the user interface
----------------------------

While the Django tutorial now continues by introducing Django's Admin module, 
we leave them alone and continue "the Lino way" of defining 
our application's user interface.

First we will add three :term:`Reports`.
A Report is the definition of a window that 
will display data in a tabular view.

Add the following code to the end your :file:`polls/models.py`::

  from lino import reports

  class Polls(reports.Report):
      "Displays the list of all Polls."
      model = Poll
      
  class Choices(reports.Report):
      "Displays a list of all Choices."
      model = Choice
          
  class ChoicesByPoll(Choices):
      "Displays the Choices for a given Poll."
      fk_name = 'poll'
      
Note that `ChoicesByPoll` is a :term:`slave report`. 
The parameter :attr:`lino.reports.Report.fk_name` is 
enough for Lino to automatically link it to it's 
master.

While you are in :file:`polls/models.py` you should also 
add a `auto_now_add=True` option to the pub_date field::
      
    pub_date = models.DateTimeField('date published',auto_now_add=True)
    
Without this change you would later get problems when trying
to create a Poll: DateTimeFields are always read-only (Lino won't 
let you edit it), but the database will complain that the field may 
not be NULL. Django's `auto_now_add` option is one possible solution 
to this.

Compare your :xfile:`settings.py` to our model at
:srcref:`/lino/tutorials/t1a/polls/models.py`.

      
Then add a `setup_menu` method to the `Lino` class 
defined in your :file:`settings.py`::

    class Lino(Lino):
        title = "Lino Tutorial"
        def setup_menu(self,ui,user,main):
            m = main.add_menu("polls","~Polls")
            m.add_action('polls.Polls')
            
            m = main.add_menu("config","~Configure")
            m.add_action('users.Users')
        extjs_root = '/'
        
        
Compare your :xfile:`settings.py` to our model at
:srcref:`/lino/tutorials/t1a/settings.py`.

That's all! Now start the development server::

  $ cd /home/luc/mysite
  $ python manage.py runserver
  
and point your browser to http://127.0.0.1:8000/ 
to see your first Lino application running.

A rather decent functionality, but it works: 
you have a main menu, and you can enter poll questions.

.. image:: t1-1.jpg
    :scale: 70

Please play around and create some polls. 

.. image:: t1-2.jpg
    :scale: 70
    
Defining your first data entry form
-----------------------------------

You'll have noticed that there is currently 
no way to enter Choices for a poll.
We are going to fix that quickly:
Create a :xfile:`config` directory for your polls application::

  $ mkdir /home/luc/mysite/polls/config/polls/Poll
  
and create a text file named `general.dtl` in that 
directory with the following content::

    main = 
      id question pub_date
      ChoicesByPoll

Then restart the server and double-click on one of the polls 
you previously created. Or double-click on the last 
empty "phantom line" to create a new Poll.

.. image:: t1-3.jpg
    :scale: 70

That's all for this first tutorial.
I hope you enjoyed it.
Are there any questions?

You might want to compare your files with our version 
of this step of the tutorial:
See :srcref:`/lino/tutorials/t1b`.
