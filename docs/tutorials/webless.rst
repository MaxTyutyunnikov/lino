The webless Lino Polls tutorial 
===============================

This tutorial is for 
people who want to use Lino's core features 
(:doc:`/topics/dumpy`, :doc:`/topics/signals`)
without any change to their existing templates and urlconfs.

Unlike :doc:`polls`, we are going to 
follow Django's "Polls" tutorial *until the end*
and then turn 
the resulting 
application into a **webless** Lino application.

Let's look together at the files under 
:srcref:`lino\apps\webless`.
After the Django polls tutorial series,
we've added only a few minor things:

(1) In :srcref:`settings.py <lino/apps/webless/mysite/settings.py>`,
a line at the beginning of the file to instantiate our :setting:`LINO`::
::

    import lino; LINO = lino.Lino(__file__,globals()) 
    
Then we add a "lino" entry to :setting:`INSTALLED_APPS`::

  INSTALLED_APPS = (
      ...
      'lino'
  )
  
Note that "'lino'" must be the **last entry** of your 
:setting:`INSTALLED_APPS` because the only thing it does 
is to call :meth:`settings.LINO.startup <lino.Lino.startup>`

And finally declare a local fixture directory::

  FIXTURE_DIRS = ['fixtures']


(2) A file 
:srcref:`polls/fixtures/demo.py
<lino/apps/webless/polls/fixtures/demo.py>`,
a simple example of an "intelligent" Python fixture providing 
demo data for our application.
It is the same file as in :doc:`polls`.

That's all. 
You now have added Lino's core features to your existing Django project.

You can now reset your database to factory defaults by issuing::

  python manage.py initdb demo
  
You can make a complete python backup like this::
  
  python manage.py dumpdata > fixtures/a.py
  
And restore it like this::

  python manage.py initdb a
 
Note the difference between "intelligent" and "dumped"
fixtures:

- intelligent (written by a human):
  :srcref:`polls/fixtures/demo.py
  <lino/apps/webless/polls/fixtures/demo.py>`

- dumped (generated by the :mod:`dumpdata <lino.management.commands.dumpdata>` 
  command):
  :srcref:`fixtures/a.py
  <lino/apps/webless/fixtures/a.py>`,
  

