Your first standalone Lino application
======================================

In this tutorial you are going to write your first 
standalone Lino application.
Don't hesitate to send us your feedback 
if you have suggestions on how to make this tutorial better.
  
.. contents:: Table of Contents
 :local:
 :depth: 2


Create a local Django project
-----------------------------

Lino applications are Django projects.
That's why we recommend to start by reading
`Part 1 of the Django tutorial
<https://docs.djangoproject.com/en/1.4/intro/tutorial01/>`_,
which applies entirely for a Lino application.
The Django documentation is good,
and it introduces some important notions about
Creating a project,
The development server,
Database setup,
Creating models,
Activating models,
and Playing with the API.

Since you have already installed Lino and 
set up your Python Path as explained in 
:doc:`/admin/pythonpath`, we suggest that 
you take `c:\\mypy\\mysite` 
as your Django project directory and 
`mysite.settings`
for your `DJANGO_SETTINGS_MODULE`
when following the Django tutorial.

- So please go now and follow
  `Part 1 of the Django tutorial
  <https://docs.djangoproject.com/en/1.4/intro/tutorial01/>`_.
  Afterwards we meet here again. See you later!

Done? I hope you enjoyed it! Now we go further.

Most files remain unchanged, they are the same as with every Django project:
:xfile:`__init__.py`, :xfile:`manage.py`,
:xfile:`urls.py` and :xfile:`wsgi.py`.
But we will now have a closer look to the file :xfile:`settings.py`.

The :xfile:`settings.py` file
-----------------------------

Lino uses some tricks to make Django :xfile:`settings.py`
files more pleasant to work with,
especially if you maintain Lino sites for several customers.

- Change the contents of your :xfile:`settings.py` 
  to the following (except for the :setting:`DATABASES` setting,
  which you should take over from your original file):

.. literalinclude:: ../../lino/tutorials/t1/settings.py

A few explanations:

Look at the following four lines of code which 
occur in almost every Lino :xfile:`settings.py` file 
and which are the thing that turns a Django project into 
a Lino application::

    from lino.apps.std.settings import *
    class Lino(Lino):
        ...
    LINO = Lino(__file__,globals()) 
    
- The first line caused your settings to "inherit" 
  from :mod:`lino.apps.std`, the common ancestor 
  of all Lino applications.

- The following lines (where the ``...`` part can be much more 
  than in our example) optionally override some of the class 
  attributes and methods defined for :class:`lino.Lino`. 
  For example the :attr:`lino.Lino.title` is a simple string to 
  occur in the browser's title bar (and possibly at other places).
  :meth:`setup_menu <lino.Lino.setup_menu>` 
  :meth:`get_main_html <lino.Lino.get_main_html>` 

- The last line finally *instantiates* your local ``LINO``.
  Every Lino application requires a setting named ``LINO`` 
  which must be a :class:`lino.Lino` instance.
  It is available in your application code as ``settings.LINO``.
  
  The first argument of the instantiator is the built-in Python variable `__file__`.
  This is how Lino knows the full path of your local settings file.
  
  The second argument is the `global()` namespace of your settings module.
  Lino uses this to fill "intelligent default values" to your settings.
  That's why these lines should be at the *beginning* of your file.

One important setting to be defined by every Lino application 
is :setting:`INSTALLED_APPS`.

For this tutorial, we gave it the following value::

    INSTALLED_APPS = (
      'lino',
      'mysite.polls'
    )

Where you maybe need to change the last item to the name you used
during the Django Tutorial.

``lino`` is mandatory for every Lino application. 
It will cause the :mod:`lino.models` module to be loaded 
which defines some system tables and general application logic.
  

- To keep things simple in this first tutorial, we didn't use 
  the following modules which are almost mandatory for 
  any real application:

    - ``django.contrib.contenttypes``
      (though most of the other ``django.contrib.*`` modules are not 
      used in Lino)
    - ``lino.modlib.users``, is Lino's replacement for Django's ``django.contrib.auth``.

  
Some more settings deserve our attention at this moment:

- More documentation about the :setting:`LOGGING` 
  setting in :func:`lino.utils.log.configure`
  
- The :setting:`ROOT_URL` setting 
  and the files :file:`urls.py` and :file:`polls/views.py` 
  generated by Django
  are not necessary in our first Lino application. 
  With Lino you don't need to worry about URLs and views 
  because Lino defines them for you.

You might want to compare your files with our version 
which you can see in the code repository at
:srcref:`/lino/tutorials/t1`.

 
Designing the user interface
----------------------------

While the Django tutorial now continues by introducing Django's Admin module, 
we leave them alone and continue "the Lino way" of defining 
our application's user interface.
Remember that Lino is an alternative to Django's Admin module.

First we add an import statement::

  from lino import dd

See :mod:`lino.dd`.

Finally we add three :term:`Tables`.
A Table is the definition of a tabular view, 
usually displayed in a Grid.

A Table definition has attributes
like `filter` and `sort_order` 
which you know from Django's QuerySet.

But it also has attributes like 
:attr:`column_names <lino.utils.table.AbstractTable.column_names>` 
or 
:attr:`detail_template <lino.core.actors.Actor.detail_template>` 
who go beyond the concept of a QuerySet.
You'll soon learn more about them.

To define Tables, you simply need to declare their classes.
Tables never get instantiated.
Lino discovers and analyzes them when it initializes.

Add the following code to the end your :file:`polls/models.py`::

  class Polls(dd.Table):
      "Displays the list of all Polls."
      model = Poll
      
  class Choices(dd.Table):
      "Displays a list of all Choices."
      
      model = Choice
      
      detail_template = """
        id question pub_date
        polls.ChoicesByPoll
        """
          
  class ChoicesByPoll(Choices):
      "Displays the Choices for a given Poll."
      master_key = 'poll'
      

Each Table class must have at least one class attribute 
`model` defined. This points to the Model on which this 
table will "work".

There are a lot of other options for tables, 
and they are documented in Lino's API doc for the
:class:`lino.core.table.Table` class.

Since tables are normal Python classes 
they can use inheritance.
In our code `ChoicesByPoll` inherits from `Choices` 
and not directly from `Table`.
that's why we don't need to explicitly specify that 

`ChoicesByPoll` is an example of a :term:`slave table`.
`ChoicesByPoll` means: the table of `Choices` 
of a given `Poll`. That given Poll is called the "master" 
of these choices.
A slave table is a table who depends on a master.

A table is a slave table when it has a class attribute 
:attr:`master_key <lino.core.table.Table.master_key>`.
This is a string containing 
the name of a ForeignKey field which 
must exist in the Table's model.

Note that you can define more than one Table per Model.
This is a fundamental difference from Django's concept of 
the `ModelAdmin` class and `Model._meta` options.

While you are in :file:`polls/models.py` you should also 
add a `auto_now_add=True` option to the pub_date field::
      
    pub_date = models.DateTimeField('date published',auto_now_add=True)
    
Without this change you would later get problems when trying
to create a Poll: DateTimeFields are always read-only (Lino won't 
let you edit it), but the database will complain that the field may 
not be NULL. Django's `auto_now_add` option is one possible solution 
to this.

Compare your :file:`models.py` to our model at
:srcref:`/lino/tutorials/t1/polls/models.py`.

Then add a `setup_menu` method to the `Lino` class 
defined in your :file:`settings.py`::

    class Lino(Lino):
        title = "Lino Tutorial"
        
        def setup_menu(self,ui,user,main):
            m = main.add_menu("polls","~Polls")
            m.add_action(self.modules.polls.Polls)
            
            m = main.add_menu("config","~Configure")
            m.add_action(self.modules.users.Users)
        
        
Compare your :xfile:`settings.py` to our model at
:srcref:`/lino/tutorials/t1/settings.py`.

That's all! Now start the development server::

  $ cd /home/luc/mysite
  $ python manage.py runserver
  
or (on Windows)::

  c:\mypy\mysite> python manage.py runserver
  
and point your browser to http://127.0.0.1:8000/ 
to see your first Lino application running.

A rather decent functionality, but it works: 
you have a main menu, and you can enter poll questions.

.. image:: t1-1.jpg
    :scale: 70

Please play around and create some polls. 

.. image:: t1-2.jpg
    :scale: 70
    
Defining your first data entry form
-----------------------------------

You'll have noticed that there is currently 
no way to enter Choices for a poll.
We are going to fix that quickly!
Add the following attribute to the declaration of your 
`Choices` table::

    detail_template = """
      id question pub_date
      ChoicesByPoll
      """

Then restart the server and double-click on one of the polls 
you previously created. Or double-click on the last 
empty "phantom line" to create a new Poll.

.. image:: t1-3.jpg
    :scale: 70

That's all for this first tutorial.
I hope you enjoyed it.
Are there any questions?

You might want to compare your files with our version 
of this step of the tutorial:
See :srcref:`/lino/tutorials/t1b`.
