# -*- coding: UTF-8 -*-
## Copyright 2008-2011 Luc Saffre
## This file is part of the Lino-DSBE project.
## Lino-DSBE is free software; you can redistribute it and/or modify 
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
## Lino-DSBE is distributed in the hope that it will be useful, 
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
## GNU General Public License for more details.
## You should have received a copy of the GNU General Public License
## along with Lino-DSBE; if not, see <http://www.gnu.org/licenses/>.


import decimal
from dateutil.relativedelta import relativedelta
ONE_DAY = relativedelta(days=1)

from django.db import models
#~ from django.conf import settings
from django.contrib.contenttypes.models import ContentType
from django.utils.translation import ugettext as _


from lino.utils import i2d
from lino.utils.instantiator import Instantiator
from lino.tools import resolve_model
from lino.utils.babel import babel_values, default_language
from lino.models import update_site_config

from django.contrib.auth import models as auth



DEMO_LINKS = [
  dict(name="Lino website",url="http://lino.saffre-rumma.net"),
  dict(name="Django website",url="http://www.djangoproject.com"),
  dict(name="ExtJS website",url="http://www.sencha.com"),
  dict(name="Python website",url="http://www.python.org"),
  dict(name="Google",url="http://www.google.com"),
]
ROW_COUNTER = 0
MAX_LINKS_PER_OWNER = 4
DATE = i2d(20061014)
    


auth = models.get_app('auth')
#~ projects = models.get_app('projects')
#~ contacts = models.get_app('contacts')
#~ notes = models.get_app('notes')
#~ properties = models.get_app('properties')

Person = resolve_model('contacts.Person')
Company = resolve_model('contacts.Company')
Contact = resolve_model('contacts.Contact')
Contract = resolve_model('dsbe.Contract')
Note = resolve_model('notes.Note')
User = resolve_model('auth.User')
    

person = Instantiator(Person).build
company = Instantiator(Company).build
contact = Instantiator(Contact).build
exam_policy = Instantiator('dsbe.ExamPolicy').build

#char_pv = Instantiator('properties.CharPropValue').build
#CharPropValue = resolve_model('properties.CharPropValue')
#~ from lino.modlib.properties import models as properties # CharPropValue, BooleanPropValue
#~ CHAR = ContentType.objects.get_for_model(properties.CharPropValue)
#BOOL = ContentType.objects.get_for_model(properties.BooleanPropValue)
#~ INT = ContentType.objects.get_for_model(properties.IntegerPropValue)

#~ def fill_choices(p,model):
    #~ i = 0
    #~ choices = p.choices_list()
    #~ if len(choices) == 0:
        #~ return
    #~ for owner in model.objects.all():
        #~ p.set_value_for(owner,choices[i])
        #~ if i + 1 < len(choices): 
            #~ i += 1
        #~ else:
            #~ i = 0

City = resolve_model('countries.City')
StudyType = resolve_model('dsbe.StudyType')
Country = resolve_model('countries.Country')
Property = resolve_model('properties.Property')
#~ StudyContent = resolve_model('dsbe.StudyContent')




def objects():
    
    #~ country = Instantiator('countries.Country',"isocode name").build
    #~ yield country('SUHH',"Soviet Union")
    
    eupen = City.objects.get(name__exact='Eupen')
    kettenis = City.objects.get(name__exact='Kettenis')
    vigala = City.objects.get(name__exact='Vigala')
    ee = Country.objects.get(pk='EE')
    be = Country.objects.get(isocode__exact='BE')
    #~ luc = person(first_name="Luc",last_name="Saffre",city=vigala,country='EE',card_number='122')
    #~ yield luc
    andreas = Person.objects.get(name__exact="Arens Andreas")
    annette = Person.objects.get(name__exact="Arens Annette")
    hans = Person.objects.get(name__exact="Altenberg Hans")
    
    cpas = company(name=u"ÖSHZ Eupen",city=eupen,country='BE')
    yield cpas
    bisa = company(name=u"BISA",city=eupen,country='BE')
    yield bisa 
    bisa_dir = contact(company=bisa,person=annette,type=1)
    yield bisa_dir 
    rcycle = company(name=u"R-Cycle Sperrgutsortierzentrum",city=eupen,country='BE')
    yield rcycle
    rcycle_dir = contact(company=rcycle,person=andreas,type=1)
    yield rcycle_dir
    yield company(name=u"Die neue Alternative V.o.G.",city=eupen,country='BE')
    yield company(name=u"Pro Aktiv V.o.G.",city=eupen,country='BE')
    yield company(name=u"Werkstatt Cardijn V.o.G.",city=eupen,country='BE')
    yield company(name=u"Behindertenstätten Eupen",city=eupen,country='BE')
    yield company(name=u"Beschützende Werkstätte Eupen",city=eupen,country='BE')
    
    luc = Person.objects.get(name__exact="Saffre Luc")
    luc.birth_place = 'Eupen'
    luc.birth_country = be
    luc.save()
    ly = person(first_name="Ly",last_name="Rumma",
      city=vigala,country='EE',card_number='123',birth_country=ee,
      birth_date=i2d(19680101),birth_date_circa=True,sex='F')
    yield ly
    mari = person(first_name="Mari",last_name="Saffre",
      city=vigala,country='EE',card_number='124',birth_country=ee,birth_date=i2d(20020405),sex='F')
    yield mari
    iiris = person(first_name="Iiris",last_name="Saffre",
      city=vigala,country='EE',card_number='125',birth_country=ee,birth_date=i2d(20080324),sex='F')
    yield iiris
    
    gerd = person(first_name="Gerd",last_name="Xhonneux",city=kettenis,name="Xhonneux Gerd",country='BE',sex='M')
    yield gerd
    yield contact(company=cpas,person=gerd,type=4)
    
    
    tatjana = person(first_name=u"Татьяна",last_name=u"Казеннова",# name="Казеннова Татьяна",
        city=kettenis,country='BE', 
        birth_place="Moskau", birth_country='SUHH',
        sex='F')
    yield tatjana
    
    from django.core.exceptions import ValidationError
    # a circular reference: bernard is contact for company adg and also has himself as `job_office_contact`
    bernard = Person.objects.get(name__exact="Bodard Bernard")
    adg = company(name=u"Arbeitsamt der D.G.",city=eupen,country='BE')
    update_site_config(job_office=adg)
    yield adg
    adg_dir = contact(company=adg,person=bernard,type=1)
    yield adg_dir
    try:
      bernard.job_office_contact = adg_dir
      bernard.clean()
      #~ bernard.save()
    except ValidationError:
        pass
    else:
        raise Exception("Expected ValidationError")
      
    
    
    
    #~ oshz = Company.objects.get(name=u"ÖSHZ Eupen")
    schule = StudyType.objects.get(name=u"Schule")
    uni = StudyType.objects.get(name=u"Universität")
    #~ abi = StudyContent.objects.get(name=u"Abitur")
    abi = u"Abitur"
    
    
    #~ project = Instantiator('projects.Project').build
    note = Instantiator('notes.Note').build
    study = Instantiator('dsbe.Study').build
    langk = Instantiator('dsbe.LanguageKnowledge').build

    user = auth.User.objects.get(username='user')
    root = auth.User.objects.get(username='root')
    
    #~ prj = project(name="Testprojekt",company=oshz)
    #~ yield prj 
    #~ yield note(user=user,project=prj,date=i2d(20091006),subject="Programmierung",company=oshz)
    
    #~ prj = project(name="Testprojekt",company=oshz)
    #~ yield prj 
    #~ yield note(user=user,project=prj,date=i2d(20091007),subject="Anschauen",company=oshz)
    
    yield note(user=root,date=i2d(20091006),subject="Programmierung",company=cpas)
    yield note(user=user,date=i2d(20091007),subject="Testen",company=cpas)
    yield note(user=root,date=i2d(20100517),subject="Programmierung",company=cpas)
    yield note(user=user,date=i2d(20100518),subject="Testen",company=cpas)
    
        
    yield study(person=luc,type=schule,content=abi,started='19740901',stopped='19860630')
    yield study(person=gerd,type=schule,content=abi,started='19740901',stopped='19860630')

    yield langk(person=luc,language='ger',written='4',spoken='4')
    yield langk(person=gerd,language='ger',written='4',spoken='4')
    yield langk(person=mari,language='ger',written='2',spoken='4')
    yield langk(person=iiris,language='ger',written='0',spoken='4')
    yield langk(person=ly,language='ger',written='2',spoken='1')
    
    yield langk(person=luc,language='fre',written='4',spoken='3')
    yield langk(person=gerd,language='fre',written='4',spoken='3')
    
    yield langk(person=luc,language='eng',written='4',spoken='3')
    yield langk(person=gerd,language='eng',written='4',spoken='3')
    yield langk(person=ly,language='eng',written='3',spoken='3')
    
    yield langk(person=gerd,language='dut',written='3',spoken='3')
    
    yield langk(person=luc,language='est',written='3',spoken='3')
    yield langk(person=ly,language='est',written='4',spoken='4')
    yield langk(person=mari,language='est',written='3',spoken='4')
    yield langk(person=iiris,language='est',written='0',spoken='3')
    
    
    contract = Instantiator('dsbe.Contract','type applies_from applies_until company contact',
      user=root,person=hans).build
    yield contract(1,i2d(20090518),i2d(20090517),rcycle,rcycle_dir)
    yield contract(1,i2d(20100518),i2d(20100517),bisa,bisa_dir)

    def f(rmd,d):
        rmd.reminder_date = d
        rmd.reminder_text = 'demo reminder'
        rmd.save()
        
    for rmd in Note.objects.all(): f(rmd,i2d(20101110))
    for rmd in Contract.objects.all(): f(rmd,i2d(20101111))
      
      
      
    
    link = Instantiator('links.Link').build
    
    users = User.objects.all()
    
    
    def demo_links(**kw):
        global ROW_COUNTER
        global DATE
        for x in range(1 + (ROW_COUNTER % MAX_LINKS_PER_OWNER)):
            kw.update(date=DATE)
            kw.update(DEMO_LINKS[ROW_COUNTER % len(DEMO_LINKS)])
            kw.update(user=users[ROW_COUNTER % users.count()])
            DATE += ONE_DAY
            ROW_COUNTER += 1
            yield link(**kw)
      
    for obj in Person.objects.all():
        for x in demo_links(person=obj):
            yield x
            
    for obj in Company.objects.all():
        for x in demo_links(company=obj):
            yield x
            
    

    from lino.modlib.dsbe.models import Course, CourseContent, CourseRequest
    oikos = company(name=u"Oikos",city=eupen,country='BE',is_courseprovider=True)
    yield oikos
    kap = company(name=u"KAP",city=eupen,country='BE',is_courseprovider=True)
    yield kap
    
    yield CourseContent(id=1,name=u"Deutsch")
    yield CourseContent(id=2,name=u"Französisch")
    
    course = Instantiator('dsbe.Course').build
    yield course(provider=oikos,title=u"Deutsch für Anfänger",content=1,start_date=i2d(20110110))
    yield course(provider=kap,title=u"Deutsch fur Anfanger",content=1,start_date=i2d(20110117))
    yield course(provider=kap,title=u"Français pour débutants",content=2,start_date=i2d(20110124))
    
    #~ baker = Properties.objects.get(pk=1)
    #~ baker.save()
    #~ yield baker

    skill = Instantiator('properties.PersonProperty','person property value').build
    for p in Person.objects.all():
        for prop in Property.objects.all():
            yield skill(p,prop,'')
            
    langk = Instantiator('dsbe.LanguageKnowledge','person:name language written spoken').build
    yield langk(u"Ausdemwald Alfons",'est','1','1')
    yield langk(u"Ausdemwald Alfons",'ger','4','3')
    yield langk(u"Bastiaensen Laurent",'ger','4','3')
    yield langk(u"Bastiaensen Laurent",'fre','4','3')
    yield langk(u"Eierschal Emil",'ger','4','3')
    yield langk(u"Ärgerlich Erna",'ger','4','4')
    
